package api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import javax.servlet.http.HttpServletRequest;

import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;

import repository.Repository;
import repository.RepositoryManager;

@Path("blocks")
@Produces(MediaType.APPLICATION_JSON)
public class BlocksResource {
    @Context
    HttpServletRequest request;

    @GET
    @Operation(
        description = "Returns an array of the 50 last blocks generated by your accounts",
        responses = {
            @ApiResponse(
                description = "The blocks"
                //content = @Content(schema = @Schema(implementation = ???))
            ),
            @ApiResponse(
                responseCode = "422",
                description = "Wallet does not exist"
            )
        }
    )
    public String getBlocks()
    {
        Security.checkApiCallAllowed("GET blocks", request);

        throw new UnsupportedOperationException();
    }

    @GET @Path("/address/{address}")	
    @Operation(
        description = "Returns an array of the 50 last blocks generated by a specific address in your wallet",
        responses = {
            @ApiResponse(
                description = "The blocks"
                //content = @Content(schema = @Schema(implementation = ???))
            ),
            @ApiResponse(
                responseCode = "400",
                description = "Invalid address"
            ),
            @ApiResponse(
                responseCode = "422",
                description = "Wallet does not exist"
            ),
            @ApiResponse(
                responseCode = "422",
                description = "Address does not exist in wallet"
            )
        }
    )
    public String getBlocks(@PathParam("address") String address)
    {
        Security.checkApiCallAllowed("GET blocks/address/" + address, request);

        throw new UnsupportedOperationException();
    }
	
    @GET @Path("/{signature}")	
    @Operation(
        description = "Returns the block that matches the given signature",
        responses = {
            @ApiResponse(
                description = "The block"
                //content = @Content(schema = @Schema(implementation = ???))
            ),
            @ApiResponse(
                responseCode = "400",
                description = "Invalid signature"
            ),
            @ApiResponse(
                responseCode = "422",
                description = "Block does not exist"
            )
        }
    )
    public String getBlock(@PathParam("signature") String signature)
    {
        Security.checkApiCallAllowed("GET blocks", request);

        throw new UnsupportedOperationException();
    }

    @GET @Path("/first")	
    @Operation(
        description = "Returns the genesis block",
        responses = {
            @ApiResponse(
                description = "The block"
                //content = @Content(schema = @Schema(implementation = ???))
            )
        }
    )
    public String getFirstBlock()
    {
        Security.checkApiCallAllowed("GET blocks/first", request);

        throw new UnsupportedOperationException();
    }

    @GET @Path("/last")	
    @Operation(
        description = "Returns the last valid block",
        responses = {
            @ApiResponse(
                description = "The block"
                //content = @Content(schema = @Schema(implementation = ???))
            )
        }
    )
    public String getLastBlock()
    {
        Security.checkApiCallAllowed("GET blocks/last", request);

        throw new UnsupportedOperationException();
    }

    @GET @Path("/child/{signature}")	
    @Operation(
        description = "Returns the child block of the block that matches the given signature",
        responses = {
            @ApiResponse(
                description = "The block"
                //content = @Content(schema = @Schema(implementation = ???))
            ),
            @ApiResponse(
                responseCode = "400",
                description = "Invalid signature"
            ),
            @ApiResponse(
                responseCode = "422",
                description = "Block does not exist"
            )
        }
    )
    public String getChild(@PathParam("signature") String signature)
    {
        Security.checkApiCallAllowed("GET blocks/child", request);

        throw new UnsupportedOperationException();
    }

    @GET @Path("/generatingbalance")
    @Operation(
        description = "Calculates the generating balance of the block that will follow the last block",
        responses = {
            @ApiResponse(
                description = "The generating balance",
                content = @Content(schema = @Schema(implementation = long.class))
            )
        }
    )
    public long getGeneratingBalance()
    {
        Security.checkApiCallAllowed("GET blocks/generatingbalance", request);

        throw new UnsupportedOperationException();
    }

    @GET @Path("/generatingbalance/{signature}")
    @Operation(
        description = "Calculates the generating balance of the block that will follow the block that matches the signature",
        responses = {
            @ApiResponse(
                description = "The block",
                content = @Content(schema = @Schema(implementation = long.class))
            ),
            @ApiResponse(
                responseCode = "400",
                description = "Invalid signature"
            ),
            @ApiResponse(
                responseCode = "422",
                description = "Block does not exist"
            )
        }
    )
    public long getGeneratingBalance(@PathParam("signature") String signature)
    {
        Security.checkApiCallAllowed("GET blocks/generatingbalance", request);

        throw new UnsupportedOperationException();
    }

    @GET @Path("/time")
    @Operation(
        description = "Calculates the time it should take for the network to generate the next block",
        responses = {
            @ApiResponse(
                description = "The time", // in seconds?
                content = @Content(schema = @Schema(implementation = long.class))
            )
        }
    )
    public long getTimePerBlock()
    {
        Security.checkApiCallAllowed("GET blocks/time", request);

        throw new UnsupportedOperationException();
    }

    @GET @Path("/time/{generatingbalance}")
    @Operation(
        description = "Calculates the time it should take for the network to generate blocks when the current generating balance in the network is the specified generating balance",
        responses = {
            @ApiResponse(
                description = "The time", // in seconds?
                content = @Content(schema = @Schema(implementation = long.class))
            )
        }
    )
    public String getTimePerBlock(@PathParam("generating") long generatingbalance)
    {
        Security.checkApiCallAllowed("GET blocks/time", request);

        throw new UnsupportedOperationException();
    }    
    
    @GET @Path("/height")
    @Operation(
        description = "Returns the block height of the last block.",
        responses = {
            @ApiResponse(
                description = "The height",
                content = @Content(schema = @Schema(implementation = int.class))
            )
        }
    )
    public int getHeight() 
    {
        Security.checkApiCallAllowed("GET blocks/height", request);
        
        try (final Repository repository = RepositoryManager.getRepository()) {
            return repository.getBlockRepository().getBlockchainHeight();
        } catch (Exception e) {
            throw new WebApplicationException(e);
        }
    }

    @GET @Path("/height/{signature}")
    @Operation(
        description = "Returns the block height of the block that matches the given signature",
        responses = {
            @ApiResponse(
                description = "The height",
                content = @Content(schema = @Schema(implementation = int.class))
            ),
            @ApiResponse(
                responseCode = "400",
                description = "Invalid signature"
            ),
            @ApiResponse(
                responseCode = "422",
                description = "Block does not exist"
            )
        }
    )
    public int getHeight(@PathParam("signature") String signature) 
    {
        Security.checkApiCallAllowed("GET blocks/height", request);

        throw new UnsupportedOperationException();
    }

    @GET @Path("/byheight/{height}")
    @Operation(
        description = "Returns the block whith given height",
        responses = {
            @ApiResponse(
                description = "The block"
                //content = @Content(schema = @Schema(implementation = ???))
            ),
            @ApiResponse(
                responseCode = "422",
                description = "Block does not exist"
            )
        }
    )
    public String getbyHeight(@PathParam("height") int height) 
    {
        Security.checkApiCallAllowed("GET blocks/byheight", request);

        throw new UnsupportedOperationException();
    }
}
